{"question":"Why would I use Ray Serve instead of Modal or Seldon? Why can't I just do it via containers?","answer":"Ray Serve is a scalable model serving library that is framework-agnostic, meaning it can serve everything from deep learning models built with frameworks like PyTorch, Tensorflow, and Keras, to Scikit-Learn models, to arbitrary Python business logic. It has several features and performance optimizations for serving Large Language Models such as response streaming, dynamic request batching, multi-node\/multi-GPU serving, etc. Ray Serve is particularly well suited for model composition and many model serving, enabling you to build a complex inference service consisting of multiple ML models and business logic all in Python code. It is built on top of Ray, so it easily scales to many machines and offers flexible scheduling support such as fractional GPUs so you can share resources and serve many machine learning models at low cost. While containers can be used for deployment, Ray Serve provides a more comprehensive and flexible solution specifically designed for machine learning models.","source":"https:\/\/docs.ray.io\/en\/master\/serve\/index.html#ray-serve-scalable-and-programmable-serving"}
{"question":"what are the possible reasons for nodes dying in a cluster?","answer":"Nodes in a cluster can die due to Out-Of-Memory (OOM) issues. This can occur when application tasks or actors consume a large amount of heap space, causing the node to run out of memory. When this happens, the operating system will start killing worker or raylet processes, disrupting the application. OOM may also stall metrics and if this happens on the head node, it may stall the dashboard or other control processes and cause the cluster to become unusable.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/scheduling\/ray-oom-prevention.html#out-of-memory-prevention"}
{"question":"how do I programatically get ray remote cluster to a target size immediately without scaling up through autoscaler ?","answer":"To programmatically get the ray remote cluster to a target size immediately without scaling up through the autoscaler, you can use the request_resources() function from the ray.autoscaler.sdk. This function allows you to command the autoscaler to scale the cluster up to a desired size. The cluster will immediately attempt to scale to accommodate the requested resources, bypassing normal upscaling speed constraints. For example, you can request 1000 CPUs by calling request_resources(num_cpus=1000).","source":"https:\/\/docs.ray.io\/en\/master\/cluster\/running-applications\/autoscaling\/reference.html#ray-autoscaler-sdk-request-resources"}
{"question":"How to setup the development environments for ray project?","answer":"To setup the development environment for the Ray project, follow these steps: 1. Clone the repository from GitHub. 2. Prepare the Python environment, you can use Anaconda\u2019s conda or Python\u2019s integrated venv module to create a virtual environment. 3. Build Ray (Python Only), unless you're working with RLlib, Tune, Autoscaler, and most Python files which do not require you to build and compile Ray. You can pip install the latest Ray wheels and replace Python files in the installed package with your local editable copy using a provided script.","source":"https:\/\/docs.ray.io\/en\/master\/ray-contribute\/development.html#building-ray-from-source"}
{"question":"how to submit job with python with local files?","answer":"To submit a job with Python with local files, you need to use the 'ray job submit' command. First, create a Python script and place it in a working directory. Then, find the HTTP address of the Ray Cluster to which you can submit a job request. This is the same address used by the Ray Dashboard, usually using port 8265. Set the RAY_ADDRESS environment variable to this address. You can also pass headers per HTTP request to the Cluster using the RAY_JOB_HEADERS environment variable. Finally, submit the job using the command 'ray job submit --working-dir your_working_directory -- python script.py'. This will run the script on the Ray Cluster and wait until the job has finished. Ray will also make the contents of the directory passed as --working-dir available to the Ray job by downloading the directory to all nodes in your cluster.","source":"https:\/\/docs.ray.io\/en\/master\/cluster\/running-applications\/job-submission\/quickstart.html#submitting-a-job"}
{"question":"How do I do inference from a model trained by Ray tune.fit()?","answer":"To do inference from a model trained by Ray tune.fit(), you need to follow three steps. Step 1: Train a model with Ray Train. Step 2: Extract the Checkpoint from the training Result. Step 3: Use Ray Data for batch inference. To load in the model from the Checkpoint inside the Python class, use the methodology corresponding to the Trainer used to train the model. In this case, use XGBoostTrainer.get_model() to load the model. Then, use the XGBoostPredictor class to predict on the test dataset.","source":"https:\/\/docs.ray.io\/en\/master\/data\/batch_inference.html#using-models-from-ray-train"}
{"question":"is there a way to load and run inference without using pytorch or tensorflow directly?","answer":"Yes, there is a way to load and run inference without using PyTorch or TensorFlow directly. One can use Ray Serve, a scalable model serving library for building online inference APIs. It is framework-agnostic and can serve everything from deep learning models built with frameworks like PyTorch, TensorFlow, and Keras, to Scikit-Learn models, to arbitrary Python business logic.","source":"https:\/\/docs.ray.io\/en\/master\/serve\/index.html#ray-serve-scalable-and-programmable-serving"}
{"question":"what does ray do","answer":"Ray is an open-source unified framework for scaling AI and Python applications like machine learning. It provides the compute layer for parallel processing, minimizing the complexity of running distributed individual and end-to-end machine learning workflows. Ray offers scalable libraries for common machine learning tasks, Pythonic distributed computing primitives for scaling Python applications, and integrations with existing tools and infrastructure. It allows data scientists and machine learning practitioners to easily parallelize and distribute ML workloads across multiple nodes and GPUs. For ML platform builders and ML engineers, Ray provides compute abstractions for creating a scalable and robust ML platform, and reduces friction between development and production. For distributed systems engineers, Ray automatically handles key processes like orchestration, scheduling, fault tolerance, and auto-scaling.","source":"https:\/\/docs.ray.io\/en\/master\/ray-overview\/index.html#overview"}
{"question":"how to pickle a variable defined in actor\u2019s init method","answer":"To pickle a variable defined in an actor\u2019s init method, you can customize your serialization process. One way is to define a __reduce__ function inside the corresponding class. This function will specify how to serialize the object. Another way is to register the class with the serializer you use, defining a custom serializer and deserializer for the class. Lastly, you can customize the serialization of a specific object by creating a helper class for serialization that includes a __reduce__ method.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/objects\/serialization.html#customized-serialization"}
{"question":"how do I do an all_reduce operation among a list of actors","answer":"To perform an all_reduce operation among a list of actors, you can use the 'apply_reduce' function provided in the context. This function takes in the results from each actor, and reduces them into a single output by adding up all word occurrences. The 'apply_reduce' function is used in the reduce phase of the MapReduce process, where the j-th return value from each mapper is sent to the j-th reducer. This is done by passing references to the data using Ray objects, which allows for the handling of large datasets that don\u2019t fit on one machine. The final result is a dictionary of word counts, which is then sorted and printed.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/examples\/map_reduce.html#shuffling-and-reducing-data"}
{"question":"What will happen if we specify a bundle with `{\"CPU\":0}` in the PlacementGroup?","answer":"If we specify a bundle with {\\","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/scheduling\/placement-group.html#bundles"}
{"question":"How to cancel job from UI?","answer":"To cancel a job from the UI, you need to use the 'ray job stop' command followed by the JOB_ID of the job you want to cancel. For example, 'ray job stop JOB_ID'. You can also use various options like --address, --no-wait, --verify, --headers, --log-style, --log-color, and --verbose for more specific operations.","source":"https:\/\/docs.ray.io\/en\/master\/cluster\/running-applications\/job-submission\/cli.html#ray-job-stop"}
{"question":"how do I get my project files on the cluster when using Ray Serve? My workflow is to call `serve deploy config.yaml --address <remote dashboard agent address>`","answer":"To get your project files on the cluster when using Ray Serve, you need to use the --working-dir argument when running the 'serve run' command. This argument specifies the local directory that contains your project files. When you run the command, it will connect to the remote cluster via Ray Client, upload the working_dir directory, and run your serve application. For more complex dependencies, you can use Runtime Environments and specify the runtime_env via a YAML file or the --runtime-env-json argument.","source":"https:\/\/docs.ray.io\/en\/master\/serve\/advanced-guides\/dev-workflow.html#testing-on-a-remote-cluster"}
{"question":"how do i install ray nightly wheel","answer":"To install the nightly Ray wheels, first uninstall any previous install of Ray using the command 'pip uninstall -y ray'. Then, you can install Ray with support for the dashboard and cluster launcher using the command 'pip install -U \\","source":"https:\/\/docs.ray.io\/en\/master\/ray-overview\/installation.html#daily-releases-nightlies"}
{"question":"how do i install the latest ray nightly wheel?","answer":"To install the latest Ray nightly wheel, first uninstall any previous installation of Ray using the command 'pip uninstall -y ray'. Then, install Ray with support for the dashboard and cluster launcher using the command 'pip install -U \\","source":"https:\/\/docs.ray.io\/en\/master\/ray-overview\/installation.html#daily-releases-nightlies"}
{"question":"how can I write unit tests for Ray code?","answer":"To write unit tests for Ray code, you can use the unittest module in Python. You can start a new Ray cluster for each test in the setUp method and shut it down in the tearDown method. However, starting and stopping a Ray cluster can add significant latency. To reduce this, you can share the Ray cluster across tests by initializing it in the setUpClass method and shutting it down in the tearDownClass method. Be aware that there are certain cases where it may be unsafe to reuse a Ray cluster across tests, such as if your application depends on setting environment variables per process or if your remote actor\/task sets any sort of process-level global variables.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/examples\/testing-tips.html#tip-2-sharing-the-ray-cluster-across-tests-if-possible"}
{"question":"How I stop Ray from spamming lots of Info updates on stdout?","answer":"You can stop Ray from spamming lots of Info updates on stdout by disabling logging to the driver. This can be done by setting log_to_driver=False in ray.init. Here is an example: import ray; ray.init(log_to_driver=False)","source":"https:\/\/docs.ray.io\/en\/master\/ray-observability\/user-guides\/configure-logging.html#disable-logging-to-the-driver"}
{"question":"how do I get the address of a ray node","answer":"To get the address of a ray node, you can use the 'NodeManagerAddress' field from the information returned by the 'ray.nodes()' function. This field contains the PrivateIP of the node that the raylet is on.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/miscellaneous.html#node-information"}
{"question":"Does Ray support NCCL?","answer":"Yes, Ray does support NCCL.","source":"https:\/\/docs.ray.io\/en\/master\/ray-more-libs\/ray-collective.html#ray-collective-communication-lib"}
{"question":"what will happen if I use AsyncIO's await to wait for a Ray future like `await x.remote()`","answer":"If you use AsyncIO's await to wait for a Ray future like `await x.remote()`, it will allow you to wait for the completion of the remote task. This is possible because Ray's ObjectRefs can be translated to asyncio.Futures, allowing you to use asyncio's await on Ray futures.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/actors\/async_api.html#objectrefs-as-asyncio-futures"}
{"question":"when should I use Ray Client?","answer":"Ray Client should be used when you want to connect an interactive Python shell to a remote cluster. It is useful for developing interactively in a local Python shell. However, it requires a stable connection to the remote cluster and will terminate the workload if the connection is lost for more than 30 seconds. For long running workloads, it is recommended to use Ray Jobs instead.","source":"https:\/\/docs.ray.io\/en\/master\/cluster\/running-applications\/job-submission\/ray-client.html#when-to-use-ray-client"}
{"question":"how to scatter actors across the cluster?","answer":"To scatter actors across the cluster, you can use the 'SPREAD' scheduling strategy in Ray. You can define this strategy when creating your remote functions or actors. For example, when defining a remote function, you can use '@ray.remote(scheduling_strategy=\\","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/scheduling\/index.html#spread"}
{"question":"How to write a map function that returns a list of object for `map_batches`?","answer":"To write a map function that returns a list of objects for `map_batches`, you need to define a function that takes a batch of data as input and returns a modified batch. This function can then be passed to the `map_batches` method of a `ray.data.Dataset` object. Here is an example:\\n\\n```\nfrom typing import Dict\nimport numpy as np\nimport ray\n\ndef add_dog_years(batch: Dict[str, np.ndarray]) -> Dict[str, np.ndarray]:\n    batch['age_in_dog_years'] = 7 * batch['age']\n    return batch\n\nds = (\n    ray.data.from_items([\n        {'name': 'Luna', 'age': 4},\n        {'name': 'Rory', 'age': 14},\n        {'name': 'Scout', 'age': 9},\n    ])\n    .map_batches(add_dog_years)\n)\nds.show()\n```\\n\\nIn this example, `add_dog_years` is a function that adds a new field `age_in_dog_years` to the input batch. This function is then passed to `map_batches`, which applies the function to each batch in the dataset.","source":"https:\/\/docs.ray.io\/en\/master\/data\/api\/doc\/ray.data.Dataset.map_batches.html#ray-data-dataset-map-batches"}
{"question":"how do I make a Ray Tune trial retry on failures?","answer":"To make a Ray Tune trial retry on failures, you can use the 'Tuner.restore' method with the 'resume_errored' parameter set to True. This will resume trials that have errored. If you want to retry errored trials from scratch, you can set the 'restart_errored' parameter to True. Here is an example: \\n\\n```\\ntuner = tune.Tuner.restore(\\n    os.path.expanduser(\\","source":"https:\/\/docs.ray.io\/en\/master\/tune\/tutorials\/tune-fault-tolerance.html#how-to-enable-fault-tolerance-in-ray-tune"}
{"question":"For the supervised actor pattern, can we keep the Worker Actor up if the Supervisor passes a reference to the Actor to another Actor, to allow the worker actor to remain even on Supervisor \/ Driver failure?","answer":"No, the worker actor cannot remain up if the Supervisor or Driver fails, even if a reference to the Actor is passed to another Actor.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/patterns\/tree-of-actors.html#pattern-using-a-supervisor-actor-to-manage-a-tree-of-actors"}
{"question":"How do I read a large text file in S3 with Ray?","answer":"To read a large text file in S3 with Ray, you can use the ray.data.read_text function. Here is an example of how to use it: \\n\\n>>> import ray\\n>>> ds = ray.data.read_text(\\","source":"https:\/\/docs.ray.io\/en\/master\/data\/api\/doc\/ray.data.read_text.html#ray-data-read-text"}
{"question":"how do I get a ray dataset from pandas","answer":"To get a Ray dataset from a pandas dataframe, you can use the `ray.data.from_pandas` function. This function takes a pandas dataframe or a list of pandas dataframes as an argument and returns a Dataset holding data read from the dataframes. Here is an example: \\n\\n```\\nimport pandas as pd\\nimport ray\\ndf = pd.DataFrame({\\","source":"https:\/\/docs.ray.io\/en\/master\/data\/api\/doc\/ray.data.from_pandas.html#ray-data-from-pandas"}
{"question":"can you give me an example of using `ray.data.map` ?","answer":"Here is an example of using `ray.data.map`:\\n\\n```\\nimport os\\nfrom typing import Any, Dict\\nimport ray\\n\\ndef parse_filename(row: Dict[str, Any]) -> Dict[str, Any]:\\n    row[\\","source":"https:\/\/docs.ray.io\/en\/master\/data\/api\/doc\/ray.data.Dataset.map.html#ray-data-dataset-map"}
{"question":"can you give me an example of using `ray.data.map` , with a callable class as input?","answer":"Here is an example of using `ray.data.map` with a callable class as input:\\n\\n```python\\nimport ray\\nfrom typing import Any, Dict\\n\\n# Define a callable class\\nclass CallableClass:\\n    def __init__(self, suffix):\\n        self.suffix = suffix\\n\\n    def __call__(self, row: Dict[str, Any]) -> Dict[str, Any]:\\n        row['filename'] += self.suffix\\n        return row\\n\\n# Instantiate the callable class\\ncallable_instance = CallableClass('_suffix')\\n\\n# Use the instance in map function\\nds = (\\n    ray.data.read_images('s3:\/\/anonymous@ray-example-data\/image-datasets\/simple', include_paths=True)\\n    .map(callable_instance)\\n)\\nprint(ds.schema())\\n```\\nIn this example, `CallableClass` is a callable class that appends a suffix to the 'filename' field of each row. An instance of `CallableClass` is created with '_suffix' as the suffix, and this instance is passed to the `map` function.","source":"https:\/\/docs.ray.io\/en\/master\/data\/api\/doc\/ray.data.Dataset.map.html#ray-data-dataset-map"}
{"question":"how do I join two ray datasets?","answer":"To join two ray datasets, you can use the `zip` method provided by the `ray.data.Dataset` API. This method materializes and zips the columns of one dataset with the columns of another. The datasets must have the same number of rows. Their column sets are merged, and any duplicate column names are disambiguated with suffixes like '_1'. The smaller of the two datasets is repartitioned to align the number of rows per block with the larger dataset. Here is an example: \\n\\n>>> import ray\\n>>> ds1 = ray.data.range(5)\\n>>> ds2 = ray.data.range(5)\\n>>> ds1.zip(ds2).take_batch()\\n{'id': array([0, 1, 2, 3, 4]), 'id_1': array([0, 1, 2, 3, 4])}","source":"https:\/\/docs.ray.io\/en\/master\/data\/api\/doc\/ray.data.Dataset.zip.html#ray-data-dataset-zip"}
{"question":"Is there a way to retrieve an object ref from its id?","answer":"No, there is no way to retrieve an object ref from its id in Ray.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/objects.html#objects"}
{"question":"what is Deployment in Ray Serve?","answer":"In Ray Serve, a deployment contains business logic or an ML model to handle incoming requests and can be scaled up to run across a Ray cluster. It consists of a number of replicas, which are individual copies of the class or function that are started in separate Ray Actors (processes). The number of replicas can be scaled up or down to match the incoming request load. A deployment is defined using the @serve.deployment decorator on a Python class or function, then bound with optional arguments to the constructor, and finally deployed using serve.run.","source":"https:\/\/docs.ray.io\/en\/master\/serve\/key-concepts.html#deployment"}
{"question":"What is user config in Ray Serve? how do I use it?","answer":"User config in Ray Serve is a configuration that you can pass to the reconfigure method of the deployment. This configuration can be updated dynamically without restarting the replicas of the deployment. The user_config must be fully JSON-serializable. You can use the user_config field to supply structured configuration for your deployment. You can pass arbitrary JSON serializable objects to the YAML configuration. Serve then applies it to all running and future deployment replicas. The application of user configuration does not restart the replica. This means you can use this field to dynamically adjust model weights and versions without restarting the cluster, adjust traffic splitting percentage for your model composition graph, configure any feature flag, A\/B tests, and hyper-parameters for your deployments. To enable the user_config feature, you need to implement a reconfigure method that takes a JSON-serializable object (e.g., a Dictionary, List or String) as its only argument. If the user_config is set when the deployment is created (e.g., in the decorator or the Serve config file), this reconfigure method is called right after the deployment\u2019s __init__ method, and the user_config is passed in as an argument. You can also trigger the reconfigure method by updating your Serve config file with a new user_config and reapplying it to your Ray cluster.","source":"https:\/\/docs.ray.io\/en\/master\/serve\/configure-serve-deployment.html#configure-ray-serve-deployments"}
{"question":"What is the difference between PACK and SPREAD strategy?","answer":"The PACK strategy tries to place all bundles onto a single node on a best-effort basis. If strict packing is not feasible, bundles can be placed onto other nodes. On the other hand, the SPREAD strategy aims to place each bundle onto separate nodes on a best-effort basis. If strict spreading is not feasible, bundles can be placed on overlapping nodes.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/scheduling\/placement-group.html#placement-strategy"}
{"question":"What\u2019s the best way to run ray across multiple machines?","answer":"To run Ray across multiple machines, you must first deploy a Ray cluster. A Ray cluster is a set of worker nodes connected to a common Ray head node. Ray provides native cluster deployment support on AWS and GCP, as well as Kubernetes via the officially supported KubeRay project. Advanced users may also deploy Ray manually or onto platforms not listed.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/cluster\/index.html#ray-clusters-overview"}
{"question":"how to deploy stable diffusion 2.1 with Ray Serve?","answer":"To deploy stable diffusion 2.1 with Ray Serve, you need to first install the necessary packages using pip install \\","source":"https:\/\/docs.ray.io\/en\/master\/serve\/tutorials\/stable-diffusion.html#serving-a-stable-diffusion-model"}
{"question":"what is actor_handle?","answer":"An actor handle is a reference to an actor which can be used to invoke the actor's methods. It can be passed into other tasks or methods, allowing them to interact with the actor.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/actors.html#passing-around-actor-handles"}
{"question":"how to kill a r detached actors?","answer":"Detached actors must be manually destroyed once you are sure that they are no longer needed. To do this, use ray.kill to manually terminate the actor. After this call, the actor\u2019s name may be reused.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/actors\/named-actors.html#actor-lifetimes"}
{"question":"How to force upgrade the pip package in the runtime environment if an old version exists?","answer":"To force upgrade the pip package in the runtime environment if an old version exists, you can specify the desired version in the 'pip' field of the runtime_env. For example, you can use a dictionary with 'packages' and 'pip_version' fields. The 'packages' field should contain a list of pip packages and the 'pip_version' field should contain the desired version of pip. Ray will spell the package name 'pip' in front of the pip_version to form the final requirement string. For example: {'packages':['tensorflow', 'requests'], 'pip_check': False, 'pip_version': '==22.0.2;python_version==\\'3.8.11\\''}.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/handling-dependencies.html#api-reference"}
{"question":"How do I do global shuffle with Ray?","answer":"To do a global shuffle with Ray, you can use the random_shuffle() function. Here is an example: \\n\\nimport ray\\n\\nds = (\\n    ray.data.read_images(\\","source":"https:\/\/docs.ray.io\/en\/master\/data\/transforming-data.html#shuffling-rows"}
{"question":"How does Ray work with async.io ?","answer":"Ray integrates natively with asyncio and allows for concurrent code execution using async\/await syntax. It supports async frameworks like aiohttp, aioredis, etc. Ray provides AsyncActor class for defining actors that can run concurrent tasks. ObjectRefs in Ray can be translated to asyncio.Futures or concurrent.futures.Future objects, allowing to await on ray futures in existing concurrent applications. Ray runs all of the methods inside a single python event loop. In async actors, only one task can be running at any point in time. The number of concurrent tasks running at once can be set using the max_concurrency flag.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/actors\/async_api.html#asyncio-for-actors"}
{"question":"How do I debug a hanging `ray.get()` call? I have it reproduced locally.","answer":"To debug a hanging `ray.get()` call, you can use the Ray dashboard to view stack traces by clicking on the 'Stack Trace' actions for active worker processes, actors, and job\u2019s driver process. Alternatively, you can use the `ray stack` CLI command to dump the stack traces of all Ray Worker processes on the current node. This requires py-spy to be installed.","source":"https:\/\/docs.ray.io\/en\/master\/ray-observability\/user-guides\/debug-apps\/debug-hangs.html#debugging-hangs"}
{"question":"How to resolve ValueError: The actor ImplicitFunc is too large?","answer":"To resolve the ValueError: The actor ImplicitFunc is too large, you can use one of the two approaches. The first approach is to use ray.put() to put the large objects in the Ray object store, and then pass object references as arguments to the remote functions or classes. The second approach is to create the large objects inside the remote functions or classes by passing a lambda method. This is also the only option for using unserializable objects.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/patterns\/closure-capture-large-objects.html#anti-pattern-closure-capturing-large-objects-harms-performance"}
{"question":"How do I use ray to distribute training for my custom neural net written using Keras in Databricks?","answer":"To distribute training for your custom neural net written using Keras in Databricks using Ray, you need to follow the following steps: \\n1. Import the necessary libraries such as tensorflow, ray, etc. \\n2. Define your dataset and model. In this case, the MNIST dataset and a CNN model are used. \\n3. Define your training function. This function should include the strategy for distributed training (in this case, MultiWorkerMirroredStrategy is used), model compilation and fitting. \\n4. Define a function to initiate the training using TensorflowTrainer from Ray. This function should include the configuration for the training such as learning rate, batch size, number of epochs, etc. \\n5. Finally, use argparse to parse command line arguments and initiate Ray. Depending on the arguments, initiate the training function defined earlier.","source":"https:\/\/docs.ray.io\/en\/master\/train\/examples\/tf\/tensorflow_mnist_example.html#training-with-tensorflow-and-ray-train"}
{"question":"how to use ray.put and ray,get?","answer":"To use ray.put and ray.get in Python, you first import the ray module. You can use ray.put() to store a value in the object store, which returns an object reference. You can then use ray.get() to fetch the result of a remote object from the object reference. If the object is a numpy array or a collection of numpy arrays, the get call is zero-copy and returns arrays backed by shared object store memory. Otherwise, the object data is deserialized into a Python object. You can also set a timeout to return early from a get that's blocking for too long. Similar methods are used in Java and C++, with slight syntax differences.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/objects.html#fetching-object-data"}
{"question":"how do I use Ray Data to pre process many files?","answer":"To use Ray Data to pre-process many files, you can use the 'map_batches()' function. First, define a function that performs the desired transformation on a batch of data. In the provided example, the 'increase_brightness' function is defined to increase the brightness of an image. Then, read the data using 'ray.data.read_images()' and apply the transformation function using '.map_batches()'. In the example, the 'increase_brightness' function is applied to the dataset 'ds'.","source":"https:\/\/docs.ray.io\/en\/master\/data\/transforming-data.html#transforming-batches-with-tasks"}
{"question":"can\u2019t pickle SSLContext objects","answer":"To handle the 'can\u2019t pickle SSLContext objects' error, you can customize your serialization process. There are three ways to do this: 1) Define a __reduce__ function inside the corresponding class if you have access to the code. 2) If you can't access or modify the class, you can register the class with the serializer you use. 3) If you want to customize the serialization of a specific object, you can create a helper class for serialization. This helper class should have a __reduce__ method that returns the object and its serialized data.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/objects\/serialization.html#customized-serialization"}
{"question":"How to disconnnect ray client?","answer":"To disconnect a ray client, you need to call the disconnect method on the client object. For example, if your client object is named 'cli1', you would disconnect it by calling 'cli1.disconnect()'.","source":"https:\/\/docs.ray.io\/en\/master\/cluster\/running-applications\/job-submission\/ray-client.html#connect-to-multiple-ray-clusters-experimental"}
{"question":"how do I get the actor id of an actor","answer":"You can get the actor id of an actor by using the following command: ray.get_runtime_context().get_actor_id()","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/api\/doc\/ray.runtime_context.get_runtime_context.html#ray-runtime-context-get-runtime-context"}
{"question":"can ray.init() can check if ray is all-ready initiated ?","answer":"No, ray.init() does not check if Ray is already initiated. It is used to connect to an existing Ray cluster or start a new one and connect to it. However, there is a parameter 'ignore_reinit_error' which, if set to true, suppresses errors from calling ray.init() a second time. To check if Ray is already initialized, you should use ray.is_initialized().","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/api\/doc\/ray.init.html#ray-init"}
{"question":"What does the `compute=actor`  argument do within `ray.data.map_batches` ?","answer":"The `compute=actor` argument in `ray.data.map_batches` allows the user to specify whether to use Ray Tasks or Ray Actors to perform the transformation. By default, Ray Data uses Tasks. If you want to use Actors, you can set `compute=actor`.","source":"https:\/\/docs.ray.io\/en\/master\/data\/api\/doc\/ray.data.Dataset.map_batches.html#ray-data-dataset-map-batches"}
{"question":"What will be implicitly put into object store?","answer":"Objects are implicitly put into the object store in Ray in two ways: they are returned by remote function calls, and they are returned by ray.put().","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/objects.html#objects"}
{"question":"How do I kill or cancel a ray task that I already started?","answer":"To cancel a ray task that you've already started, you can call ray.cancel on an ObjectRef returned by the task. By default, this will send a KeyboardInterrupt to the task\u2019s worker if it is mid-execution. If you want to force-exit the worker, you can pass force=True to ray.cancel. However, Ray will not automatically retry tasks that have been cancelled. If there are memory leaks on a worker due to application-level code, you can set the max_calls option in a task\u2019s @ray.remote decorator to make progress. Once a worker has executed this many invocations of the given remote function, it will automatically exit.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/fault_tolerance\/tasks.html#cancelling-misbehaving-tasks"}
{"question":"how to send  extra arguments in dataset.map_batches function?","answer":"To send extra arguments in the dataset.map_batches function, you can use the parameters 'fn_args' and 'fn_kwargs'. 'fn_args' is used to pass positional arguments to the function after the first argument. These arguments are top-level arguments to the underlying Ray task. 'fn_kwargs' is used to pass keyword arguments to the function. These arguments are also top-level arguments to the underlying Ray task.","source":"https:\/\/docs.ray.io\/en\/master\/data\/api\/doc\/ray.data.Dataset.map_batches.html#ray-data-dataset-map-batches"}
{"question":"where does ray GCS store the history of jobs run on a kuberay cluster? What type of database and format does it use for this?","answer":"Ray GCS stores the history of jobs run on a kuberay cluster in an external Redis database. It uses key-value format for this.","source":"https:\/\/docs.ray.io\/en\/master\/cluster\/kubernetes\/user-guides\/static-ray-cluster-without-kuberay.html#external-redis-integration-for-fault-tolerance"}
{"question":"how do I specify ScalingConfig for a Tuner run?","answer":"To specify ScalingConfig for a Tuner run, you need to include it in the 'param_space' argument when creating a Tuner instance. Here is an example: \\n\\nparam_space = {\\n    \\","source":"https:\/\/docs.ray.io\/en\/master\/tune\/api\/doc\/ray.tune.Tuner.html#ray-tune-tuner"}
{"question":"how to utilize \u2018zero-copy\u2019 feature ray provide for numpy?","answer":"To utilize the 'zero-copy' feature that Ray provides for numpy, you need to store the numpy array as a read-only object. All Ray workers on the same node can read the numpy array in the object store without copying, which is the 'zero-copy' read. Each numpy array object in the worker process holds a pointer to the relevant array held in shared memory. If you need to write to the read-only object, you will first need to copy it into the local process memory.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/objects\/serialization.html#numpy-arrays"}
{"question":"if there are O(millions) of keys that all have state, is it ok to spin up 1=1 actors? Or would it be advised to create \u2018key pools\u2019 where an actor can hold 1=many keys?","answer":"It would be advised to create \u2018key pools\u2019 where an actor can hold many keys. Over-parallelizing with too fine-grained tasks can harm speedup because it comes with higher overhead than an ordinary function call. If you have a function or task that\u2019s too small, you can use a technique called batching to make your tasks do more meaningful work in a single call.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/patterns\/too-fine-grained-tasks.html#anti-pattern-over-parallelizing-with-too-fine-grained-tasks-harms-speedup"}
{"question":"How to find the best checkpoint from the trial directory?","answer":"To find the best checkpoint from the trial directory, you can use the 'get_best_checkpoint' method of the 'ray.tune.ExperimentAnalysis' class. This method returns the best persistent checkpoint path of the provided trial.","source":"https:\/\/docs.ray.io\/en\/master\/tune\/api\/doc\/ray.tune.ExperimentAnalysis.html#ray-tune-experimentanalysis"}
{"question":"what are the advantages of using a named actor?","answer":"Named actors in Ray allow you to give an actor a unique name within their namespace, which enables you to retrieve the actor from any job in the Ray cluster. This can be useful if you cannot directly pass the actor handle to the task that needs it, or if you are trying to access an actor launched by another driver. Named actors are also useful in scenarios where you want to create an actor only if it doesn't exist, as Ray provides a get_if_exists option for actor creation that does this out of the box.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/actors\/named-actors.html#named-actors"}
{"question":"How do I read a text file stored on S3 using Ray Data?","answer":"To read a text file stored on S3 using Ray Data, you can use the ray.data.read_text function. Here is an example of how to use it: \\n>>> import ray\\n>>> ds = ray.data.read_text(\\","source":"https:\/\/docs.ray.io\/en\/master\/data\/api\/doc\/ray.data.read_text.html#ray-data-read-text"}
{"question":"how do I get the IP of the head node for my Ray cluster?","answer":"You can get the IP of the head node for your Ray cluster by using the 'ray.nodes()' function. This will return a list of nodes in your cluster. From this list, you can find the 'NodeManagerAddress' which is the PrivateIP of the node that the raylet is on.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/miscellaneous.html#node-information"}
{"question":"How to take a subset of a Ray Dataset?","answer":"To take a subset of a Ray Dataset, you can use the 'limit' method. This method truncates the dataset to the first 'limit' rows. For example, if you have a dataset 'ds' and you want to take the first 5 rows, you can use 'ds.limit(5)'. This will return a new Dataset pointing to the truncated distributed data.","source":"https:\/\/docs.ray.io\/en\/master\/data\/api\/doc\/ray.data.Dataset.limit.html#ray-data-dataset-limit"}
{"question":"How do I load all checkpoints from trials of a Tune experiment launched with `tune.run`? I ran my initial experiment with cloud checkpointing, so I\u2019d need to download all the checkpoints to analyze them.","answer":"You can restore the Tune experiment by calling Tuner.restore(path_or_cloud_uri, trainable), where path_or_cloud_uri points to a location either on the filesystem or cloud where the experiment was saved to. After the Tuner has been restored, you can access the results and checkpoints by calling Tuner.get_results() to receive the ResultGrid object.","source":"https:\/\/docs.ray.io\/en\/master\/tune\/tutorials\/tune_get_data_in_and_out.html#how-do-i-access-tune-results-after-i-am-finished"}
{"question":"How can I kill a \"detached\" Actor ?","answer":"Detached actors must be manually destroyed once you are sure that they are no longer needed. To do this, use ray.kill to manually terminate the actor. After this call, the actor\u2019s name may be reused.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/actors\/named-actors.html#actor-lifetimes"}
{"question":"How do I set env variables in ray init? Let\u2019 say it\u2019s export foo=\u201cfoo\u201d","answer":"You can set environment variables in ray init by using the 'env_vars' parameter in the RuntimeEnv class. For example, to set the environment variable 'foo' to 'foo', you would do: RuntimeEnv(env_vars={'foo': 'foo'}).","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/api\/doc\/ray.runtime_env.RuntimeEnv.html#ray-runtime-env-runtimeenv"}
{"question":"how to rerun a canceled ray task","answer":"Cancelled tasks in Ray cannot be rerun. Once a task is cancelled, it is not executed or retried.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/api\/doc\/ray.cancel.html#ray-cancel"}
{"question":"How to use the exclude option to the runtime_env","answer":"To use the exclude option in the runtime_env, you need to specify a list of files or paths that you want to exclude from being uploaded to the cluster. This is done in conjunction with the working_dir or py_modules fields. The excludes field uses the pattern-matching syntax used by .gitignore files. You should not use absolute paths with excludes, rather, you should use the relative path. For example: {\\","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/handling-dependencies.html#api-reference"}
{"question":"How do I get started?","answer":"To get started with Ray, you can choose the right guide for your task. If you want to scale ML workloads, you can use the Ray Libraries Quickstart. If you want to scale general Python applications, you can use the Ray Core Quickstart. If you want to deploy to the cloud, you can use the Ray Clusters Quickstart. If you want to debug and monitor applications, you can use the Debugging and Monitoring Quickstart. There are also specific quickstart guides for using individual libraries for ML workloads, such as Ray Data for scalable datasets, and Ray Train for distributed model training.","source":"https:\/\/docs.ray.io\/en\/master\/ray-overview\/getting-started.html#getting-started"}
{"question":"How to specify python version in runtime_env?","answer":"To specify the Python version in runtime_env, you can use the 'pip' or 'conda' fields. In the 'pip' field, you can specify the Python version as part of the 'pip_version' field in the dictionary. For example: {'packages':['tensorflow', 'requests'], 'pip_check': False, 'pip_version': '==22.0.2;python_version==\\'3.8.11\\''}. In the 'conda' field, you can specify the Python version in the 'dependencies' field of the dictionary or in the conda 'environment.yml' file.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/handling-dependencies.html#api-reference"}
{"question":"how to create a Actor in a namespace?","answer":"To create an actor in a namespace, you first need to set the namespace when you connect to the cluster. In Python, you can do this by using the 'ray.init' function with the 'namespace' parameter. After setting the namespace, you can create a named actor using the 'Actor.options' method with the 'name' and 'lifetime' parameters. The actor's name must be unique within the namespace. If you want to specify a namespace for a named actor while creating it, you can use the 'namespace' parameter in the 'Actor.options' method. The created actor will belong to the specified namespace, regardless of the current job's namespace.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/namespaces.html#using-namespaces"}
{"question":"Can I specify multiple working directories?","answer":"No, you cannot specify multiple working directories.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/handling-dependencies.html#using-local-files"}
{"question":"what if I set num_cpus=0 for tasks","answer":"If you set num_cpus=0 for tasks, it means that your task or actor is IO bound and has low CPU usage. This allows for fractional resource requirements, which Ray supports.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/scheduling\/resources.html#fractional-resource-requirements"}
{"question":"is it possible to have ray on k8s without using kuberay? especially with the case that autoscaler is enabled.","answer":"No, it is not possible to have Ray on Kubernetes with autoscaler enabled without using KubeRay.","source":"https:\/\/docs.ray.io\/en\/master\/cluster\/kubernetes\/user-guides\/static-ray-cluster-without-kuberay.html#advanced-deploying-a-static-ray-cluster-without-kuberay"}
{"question":"how to manually configure and manage Ray cluster on Kubernetes","answer":"To manually configure and manage a Ray cluster on Kubernetes, you need to deploy a static Ray cluster into the default namespace. This can be done by applying a sample Ray Cluster from the Ray repo using the command '! kubectl apply -f https:\/\/raw.githubusercontent.com\/ray-project\/ray\/master\/doc\/source\/cluster\/kubernetes\/configs\/static-ray-cluster.with-fault-tolerance.yaml'. The Ray cluster has fault tolerance enabled by default using the external Redis, and you need to set the Redis IP address in the config. Once the Ray cluster has been deployed, you can view the pods for the head node and worker nodes by running '! kubectl get pods'. Wait for the pods to reach the Running state. If your pods are stuck in the Pending state, you can check for errors via 'kubectl describe pod deployment-ray-head-xxxx-xxxxx' and ensure that your Docker resource limits are set high enough.","source":"https:\/\/docs.ray.io\/en\/master\/cluster\/kubernetes\/user-guides\/static-ray-cluster-without-kuberay.html#deploying-a-static-ray-cluster"}
{"question":"How do I make the GPU available on my M1 laptop to ray?","answer":"To make the GPU available on your M1 laptop for Ray, you need to first install miniforge. You can do this by downloading it from the provided link using wget, then running the downloaded script. After installation, ensure you're using the miniforge environment by sourcing your bash profile and activating conda. Finally, install Ray as you normally would using pip.","source":"https:\/\/docs.ray.io\/en\/master\/ray-overview\/installation.html#m1-mac-apple-silicon-support"}
{"question":"how do I set custom \/tmp directory for remote cluster?","answer":"You can set a custom \/tmp directory for a remote cluster by using the '--temp-dir' option followed by the path to your desired directory. This option allows you to manually specify the root temporary directory of the Ray process. However, it only works when '--head' is specified.","source":"https:\/\/docs.ray.io\/en\/master\/cluster\/cli.html#ray-start"}
{"question":"if I set --temp-dir to a different directory than \/tmp, will ray object spill to the custom directory ?","answer":"Yes, if you set --temp-dir to a different directory than \/tmp, Ray will spill objects to the custom directory. You can configure the directory where objects are spilled to by using the 'object_spilling_config' parameter in the 'ray.init' function.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/objects\/object-spilling.html#object-spilling"}
{"question":"can you give me an example for *`--runtime-env-json`*","answer":"An example for `--runtime-env-json` can be seen in the third option of using the Ray Jobs API (CLI). Here is the example: `$ ray job submit --address=\\","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/handling-dependencies.html#specifying-a-runtime-environment-per-job"}
{"question":"How do I access logs for a dead node?","answer":"To access logs for a dead node, you can use log processing tools like Fluent Bit, Vector, Fluentd, Filebeat, and Promtail. Ray writes logs to files in the directory \/tmp\/ray\/session_*\/logs on each Ray pod\u2019s file system. You can collect logs written to a pod\u2019s filesystem using one of two logging strategies: sidecar containers or daemonsets. For sidecar containers, you can process logs by configuring a log-processing sidecar for each Ray pod. Ray containers should be configured to share the \/tmp\/ray directory with the logging sidecar via a volume mount. For daemonsets, you can collect logs at the Kubernetes node level by deploying a log-processing daemonset onto the Kubernetes cluster\u2019s nodes. It is key to mount the Ray container\u2019s \/tmp\/ray directory to the relevant hostPath.","source":"https:\/\/docs.ray.io\/en\/master\/cluster\/kubernetes\/user-guides\/logging.html#log-persistence"}
{"question":"when you use ray dataset to read a file, can you make sure the order of the data is preserved?","answer":"Yes, you can ensure the order of the data is preserved when using ray dataset to read a file by setting the 'preserve_order' execution option to True.","source":"https:\/\/docs.ray.io\/en\/master\/data\/performance-tips.html#deterministic-execution"}
{"question":"Can you explain what \"Ray will *not* retry tasks upon exceptions thrown by application code\" means ?","answer":"The statement 'Ray will not retry tasks upon exceptions thrown by application code' means that if an exception or error is thrown within the application code of a task, Ray will not automatically retry the task. This is the default behavior. However, this can be overridden by setting the 'retry_exceptions' argument to True or by passing a list of retryable exceptions. If 'retry_exceptions' is set to True, Ray will retry the task upon any exception. If a list of exceptions is passed, Ray will only retry the task if one of the listed exceptions is thrown.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/fault_tolerance\/tasks.html#retrying-failed-tasks"}
{"question":"how do I specify the log directory when starting Ray?","answer":"You can change the root temporary directory by passing --temp-dir={your temp path} to ray start. However, there is not currently a stable way to change the root temporary directory when calling ray.init(), but if you need to, you can provide the _temp_dir argument to ray.init().","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/configure.html#logging-and-debugging"}
{"question":"how to use ray api to scale up a cluster","answer":"To scale up a cluster using Ray API, you can use the request_resources() function from the ray.autoscaler.sdk module. This function commands the autoscaler to scale the cluster up to a desired size. The cluster will immediately attempt to scale to accommodate the requested resources, bypassing normal upscaling speed constraints. You can specify the number of CPUs you want to be available using the num_cpus parameter, or you can specify a set of resource shapes using the bundles parameter. For example, to request 1000 CPUs, you would use the command request_resources(num_cpus=1000). To request 64 CPUs and also fit a 1-GPU\/4-CPU task, you would use the command request_resources(num_cpus=64, bundles=[{'GPU': 1, 'CPU': 4}]).","source":"https:\/\/docs.ray.io\/en\/master\/cluster\/running-applications\/autoscaling\/reference.html#ray-autoscaler-sdk-request-resources"}
{"question":"we plan to use Ray cloud launcher to start a cluster in AWS. How can we specify a subnet in the deployment file?","answer":"To specify a subnet in the deployment file, you need to add the 'SubnetId' field under the 'node_config' section for both 'ray.head.default' and 'ray.worker.default'. The value of 'SubnetId' should be the ID of the subnet you want to use.","source":"https:\/\/docs.ray.io\/en\/master\/cluster\/vms\/references\/ray-cluster-configuration.html#full-configuration"}
{"question":"where I can find HTTP server error code log for Ray serve","answer":"You can find the HTTP server error code log for Ray serve on each node at \/tmp\/ray\/session_latest\/logs\/serve\/.","source":"https:\/\/docs.ray.io\/en\/master\/serve\/monitoring.html#ray-logging"}
{"question":"How to update files in working directory ?","answer":"To update files in the working directory, you can use the 'runtime_env' parameter in the 'ray.init()' function. You need to specify the local directory that contains the files you want to update. This directory will automatically be pushed to the cluster nodes when 'ray.init()' is called. You can also specify files via a remote cloud storage URI.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/handling-dependencies.html#using-local-files"}
{"question":"What are the reasons for a node to change it\u2019s status to dead?","answer":"A node can change its status to dead due to a worker node failure, a head node failure, or a raylet failure. In the case of a worker node failure, all running tasks and actors will fail and all objects owned by worker processes of this node will be lost. If a head node fails, the entire Ray cluster fails. When a raylet process fails, the corresponding node will be marked as dead and is treated the same as node failure. Each raylet is associated with a unique id, so even if the raylet restarts on the same physical machine, it\u2019ll be treated as a new raylet\/node to the Ray cluster.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/fault_tolerance\/nodes.html#node-fault-tolerance"}
{"question":"What are the reasons for spikes in node CPU utilization","answer":"Spikes in node CPU utilization can occur due to the number of concurrently running tasks or actors on each node. By default, Ray tasks require 1 CPU each and Ray actors require 0 CPU each, so the scheduler limits task concurrency to the available CPUs and actor concurrency to infinite. Tasks that use more than 1 CPU may experience slowdown due to interference from concurrent ones. Tasks or actors that use more than their proportionate share of memory may overload a node and cause issues like OOM. To manage this, the number of concurrently running tasks or actors on each node can be reduced by increasing the amount of resources requested by them.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/patterns\/limit-running-tasks.html#pattern-using-resources-to-limit-the-number-of-concurrently-running-tasks"}
{"question":"What AWS machine type is recommended to deploy a RayService on EKS?","answer":"r5dn.16xlarge","source":"https:\/\/docs.ray.io\/en\/master\/cluster\/vms\/user-guides\/large-cluster-best-practices.html#configuring-the-head-node"}
{"question":"Is there a way to configure the session name generated by ray?","answer":"No, there is not a way to configure the session name generated by Ray.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/configure.html#logging-and-debugging"}
{"question":"can I use the Python SDK to get a link to Ray dashboard for a given job?","answer":"Yes, you can use the Python SDK to get a link to the Ray dashboard for a given job.","source":"https:\/\/docs.ray.io\/en\/master\/ray-observability\/getting-started.html#set-up-dashboard"}
{"question":"What may possible cause the node where this task was running crashed unexpectedly. This can happen if: (1) the instance where the node was running failed, (2) raylet crashes unexpectedly (OOM, preempted node, etc).","answer":"The node where the task was running could have crashed unexpectedly due to several reasons. One of the main reasons could be the instance where the node was running failed. This could be due to system errors or unexpected crashes such as Out of Memory (OOM) errors or the node being preempted. Another reason could be the Raylet (the system that schedules tasks in Ray) crashing unexpectedly. This could also be due to OOM errors, or other unexpected errors such as SIGSEGV. Additionally, the task could be killed by the Linux Out of Memory killer due to high memory usage, or by Ray's application-level memory monitor if the memory usage of the host exceeds a certain threshold.","source":"https:\/\/docs.ray.io\/en\/master\/ray-observability\/user-guides\/debug-apps\/debug-memory.html#debugging-memory-issues"}
{"question":"how can I force ray head node to use custom pem file to ssh worker node?","answer":"To force the ray head node to use a custom pem file to ssh into the worker node, you need to specify the path to your custom pem file in the 'auth' section of the configuration. You can do this by uncommenting the 'ssh_private_key' line and replacing '\/path\/to\/your\/key.pem' with the actual path to your custom pem file. The updated 'auth' section would look like this:\\n\\nauth:\\n    ssh_user: ubuntu\\n    ssh_private_key: \/path\/to\/your\/custom\/key.pem","source":"https:\/\/docs.ray.io\/en\/master\/cluster\/vms\/references\/ray-cluster-configuration.html#full-configuration"}
{"question":"How do I use `worker_setup_hook` in a runtime env to set do some setup on worker node creation?","answer":"To use `worker_setup_hook` in a runtime env to do some setup on worker node creation, you need to define a setup function and pass it to the `worker_process_setup_hook` in the `runtime_env` parameter of `ray.init()`. Here is an example:\\n\\n```\n# driver.py\ndef logging_setup_func():\n    logger = logging.getLogger(\\","source":"https:\/\/docs.ray.io\/en\/master\/ray-observability\/user-guides\/configure-logging.html#customizing-worker-process-loggers"}
{"question":"How do I avoid my dataset shuffling during a ray.data.map_batches?","answer":"To avoid your dataset shuffling during a ray.data.map_batches, you can enable deterministic execution by setting 'ctx.execution_options.preserve_order = True'. This ensures that block ordering is preserved through execution.","source":"https:\/\/docs.ray.io\/en\/master\/data\/performance-tips.html#deterministic-execution"}
{"question":"Is the order of the input data preserved after a map_batches operation?","answer":"Yes","source":"https:\/\/docs.ray.io\/en\/master\/data\/performance-tips.html#deterministic-execution"}
{"question":"ray serve returns generic internal service error when there is an internal failure, how do I get it to emit more detailed errors or logs?","answer":"To get more detailed errors or logs from Ray Serve, you can leverage Ray's logging system. Ray Serve uses Python\u2019s standard logging module with a logger named 'ray.serve'. By default, logs are emitted from actors both to stderr and on disk on each node at \/tmp\/ray\/session_latest\/logs\/serve\/. This includes both system-level logs from the Serve controller and proxy as well as access logs and custom user logs produced from within deployment replicas. You can also enable JSON-formatted logging in the Serve log file by setting the environment variable RAY_SERVE_ENABLE_JSON_LOGGING=1. Additionally, you can set a custom request ID for each HTTP request by including X-Request-ID in the request header and retrieve request ID from response. You can explore and filter your logs using Loki.","source":"https:\/\/docs.ray.io\/en\/master\/serve\/monitoring.html#ray-logging"}
{"question":"where do I view logs using python logger emitted by my ray serve endpoint in the ray cluster","answer":"You can view logs emitted by your ray serve endpoint in the ray cluster using Python's standard logging module with a logger named 'ray.serve'. By default, logs are emitted from actors both to stderr and on disk on each node at \/tmp\/ray\/session_latest\/logs\/serve\/. This includes both system-level logs from the Serve controller and proxy as well as access logs and custom user logs produced from within deployment replicas. You can also find a copy of these logs at \/tmp\/ray\/session_latest\/logs\/serve\/. You can parse these stored logs with a logging stack such as ELK or Loki to be able to search by deployment or replica.","source":"https:\/\/docs.ray.io\/en\/master\/serve\/monitoring.html#ray-logging"}
{"question":"where can I see logs for a failed ray serve deployment","answer":"You can see the logs for a failed ray serve deployment in the Serve Application Detail page. You need to click the expand button of a deployment to see the replicas. For each replica, there are two available actions. You can see the logs of that replica.","source":"https:\/\/docs.ray.io\/en\/master\/ray-observability\/getting-started.html#serve-view"}
{"question":"can you show me an example of ray.actor.exit_actor()","answer":"@ray.remote\\nclass Actor:\\n    def exit(self):\\n        ray.actor.exit_actor()\\n\\nactor = Actor.remote()\\nactor.exit.remote()","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/actors\/terminating-actors.html#manual-termination-within-the-actor"}
{"question":"how to add log inside actor?","answer":"To add a log inside an actor in Ray, you need to customize the logger configuration when you define the Actor. First, import the necessary modules. Then, initiate a driver using ray.init(). Define your Actor class and within it, set the logging level using logging.basicConfig(level=logging.INFO). Define a method for logging where you get the logger using logging.getLogger(__name__) and log your message using logger.info(msg). Finally, create an instance of your Actor and call the log method with your message.","source":"https:\/\/docs.ray.io\/en\/master\/ray-observability\/user-guides\/configure-logging.html#customizing-worker-process-loggers"}
{"question":"can you write a script to do batch inference with GPT-2 on text data from an S3 bucket?","answer":"Yes, you can write a script to do batch inference with GPT-2 on text data from an S3 bucket. The provided context includes a script that uses the transformers library to perform text classification on data read from an S3 bucket. The script uses the map_batches() method from the ray.data module to apply the TextClassifier class to each batch of data.","source":"https:\/\/docs.ray.io\/en\/master\/data\/working-with-text.html#performing-inference-on-text"}
{"question":"How do I enable Ray debug logs?","answer":"To enable Ray debug logs, you need to get the handle for the logger you want to modify using the logging.getLogger() function. Then, you can modify the logging level using the setLevel() method. For example, to modify the logging configuration for Ray libraries, you can use the following code: \\n\\nimport logging\\n\\n# First, get the handle for the logger you want to modify\\nray_data_logger = logging.getLogger(\\","source":"https:\/\/docs.ray.io\/en\/master\/ray-observability\/user-guides\/configure-logging.html#using-rays-logger"}
{"question":"How do I list the current Ray actors from python?","answer":"To list the current Ray actors from python, you can use the `ray.util.state.list_actors` function. This function has several parameters such as `address`, `filters`, `limit`, `timeout`, `detail`, `raise_on_missing_output`, and `_explain`. The function returns a list of ActorState.","source":"https:\/\/docs.ray.io\/en\/master\/ray-observability\/reference\/doc\/ray.util.state.list_actors.html#ray-util-state-list-actors"}
{"question":"I want to kill the replica actor from Python. how do I do it?","answer":"To kill the replica actor from Python, you can use the `ray.kill(actor_handle)` function. This will cause the actor to immediately exit its process, causing any current, pending, and future tasks to fail with a RayActorError. If you want Ray to automatically restart the actor, make sure to set a nonzero `max_restarts` in the `@ray.remote` options for the actor, then pass the flag `no_restart=False` to `ray.kill`. For named and detached actors, calling `ray.kill` on an actor handle destroys the actor and allows the name to be reused.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/actors\/terminating-actors.html#manual-termination-via-an-actor-handle"}
{"question":"show a map batch example with batch_format","answer":"In Ray Data, batches are represented as dicts of NumPy ndarrays or pandas DataFrames. By default, batches are represented as dicts of NumPy ndarrays. To configure the batch type, you can specify the batch_format in map_batches(). Here are two examples: \\n\\nFor NumPy: \\n\\nfrom typing import Dict\\nimport numpy as np\\nimport ray\\n\\ndef increase_brightness(batch: Dict[str, np.ndarray]) -> Dict[str, np.ndarray]:\\n    batch[\\","source":"https:\/\/docs.ray.io\/en\/master\/data\/transforming-data.html#configuring-batch-format"}
{"question":"how to find local ray address","answer":"The local Ray address can be found in the output after running 'ray.init()'. In the provided example, the address of the Ray dashboard is http:\/\/127.0.0.1:8265.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/examples\/gentle_walkthrough.html#ray-core"}
{"question":"How to start ray cluster on multiple node via CLI?","answer":"To start a Ray cluster on multiple nodes via CLI, first choose any node to be the head node and run the command 'ray start --head --port=6379'. This command will print out the Ray cluster address. Then on each of the other nodes, run the command 'ray start --address=<head-node-address:port>' to connect to the head node. Replace 'head-node-address:port' with the value printed by the command on the head node.","source":"https:\/\/docs.ray.io\/en\/master\/cluster\/vms\/user-guides\/launching-clusters\/on-premises.html#manually-set-up-a-ray-cluster"}
{"question":"In Ray Serve, how to specify whether to set up an httpproxy on each node, or just the head node?","answer":"In Ray Serve, you can specify to set up an HTTP proxy on each node by using the 'location' field of 'http_options'. This allows you to reach Serve and send requests to any models via any of the servers. You can also use your own load balancer on top of Ray Serve.","source":"https:\/\/docs.ray.io\/en\/master\/serve\/architecture.html#how-does-serve-ensure-horizontal-scalability-and-availability"}
{"question":"How the GCS determines which Kubernetes pod to kill when using KubeRay autoscaling?","answer":"The GCS does not directly determine which Kubernetes pod to kill when using KubeRay autoscaling. Instead, the Ray autoscaler, a Ray cluster process, automatically scales a cluster up and down based on resource demand. It adjusts the number of nodes (Ray pods) in the cluster based on the resources required by tasks, actors, or placement groups. The autoscaler also removes nodes after they become idle for some time. A node is considered idle if it has no active tasks, actors, or objects.","source":"https:\/\/docs.ray.io\/en\/master\/cluster\/kubernetes\/user-guides\/configuring-autoscaling.html#kuberay-autoscaling"}
{"question":"How can I set the `request_timeout_s` in `http_options` section of a Ray Serve YAML config file?","answer":"You can set the `request_timeout_s` in the `http_options` section of a Ray Serve YAML config file by adding the `request_timeout_s` field under `http_options` and assigning it the desired value. For example:\\n\\nhttp_options:\\n\\n  host: ...\\n\\n  port: ...\\n\\n  request_timeout_s: 30\\n\\nThis will set the end-to-end timeout for a request to 30 seconds before terminating and retrying at another replica. Note that this config is global to your Ray cluster, and it cannot be updated during runtime.","source":"https:\/\/docs.ray.io\/en\/master\/serve\/production-guide\/config.html#serve-config-files-serve-build"}
{"question":"Do you need the DAGDriver to deploy a serve application using RayServe?","answer":"No, you do not need the DAGDriver to deploy a serve application using RayServe.","source":"https:\/\/docs.ray.io\/en\/master\/serve\/key-concepts.html#deployment"}
{"question":"What\u2019s the import path that I need to provide to a simple RayServe deployment?","answer":"The import path that you need to provide to a simple RayServe deployment is the path to your top-level Serve deployment. In the provided context, it is 'fruit:deployment_graph'.","source":"https:\/\/docs.ray.io\/en\/master\/serve\/production-guide\/config.html#serve-config-files-serve-build"}
{"question":"how can I avoid objects not getting spilled?","answer":"To avoid objects not getting spilled in Ray, you can configure the directory where objects are spilled to. You can also specify multiple directories for spilling to spread the IO load and disk space usage across multiple physical devices if needed. To optimize the performance, it is recommended to use an SSD instead of an HDD when using object spilling for memory-intensive workloads. If you are using an HDD, it is recommended that you specify a large buffer size (> 1MB) to reduce IO requests during spilling. To prevent running out of disk space, local object spilling will throw OutOfDiskError if the disk utilization exceeds the predefined threshold. You can adjust the threshold by setting local_fs_capacity_threshold, or set it to 1 to disable the protection. You can also enable object spilling to remote storage (any URI supported by smart_open). It is recommended that you specify a large buffer size (> 1MB) to reduce IO requests during spilling. Spilling to multiple remote storages is also supported.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/objects\/object-spilling.html#single-node"}
{"question":"what\u2019s ray core","answer":"Ray Core provides a small number of core primitives for building and scaling distributed applications. It allows you to turn your functions and classes into Ray tasks and actors, and work with Ray objects. You can run functions as remote tasks in the cluster by decorating your function with @ray.remote and calling the function with .remote(). Ray also provides actors to parallelize computation across multiple actor instances. When you instantiate a class that is a Ray actor, Ray will start a remote instance of that class in the cluster. This actor can then execute remote method calls and maintain its own internal state. Ray stores task and actor call results in its distributed object store, returning object references that can be later retrieved.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/walkthrough.html#what-is-ray-core"}
{"question":"Does ray support cron job","answer":"No, Ray does not support cron jobs.","source":"https:\/\/docs.ray.io\/en\/master\/cluster\/running-applications\/job-submission\/index.html#ray-jobs-api"}
{"question":"can you give me the dependencies list for api read_images?","answer":"The dependencies for the api read_images are: Union, List, Optional, pyarrow.fs.FileSystem, Dict, Any, ray.data.datasource.file_meta_provider.BaseFileMetadataProvider, ray.data.datasource.partitioning.PathPartitionFilter, FileExtensionFilter, ray.data.datasource.partitioning.Partitioning, Tuple, ray.data.dataset.Dataset.","source":"https:\/\/docs.ray.io\/en\/master\/data\/api\/doc\/ray.data.read_images.html#ray-data-read-images"}
{"question":"If I shutdown a raylet, will the tasks and workers on that node also get killed?","answer":"Yes, if a raylet is shutdown, the tasks and workers on that node will also get killed.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/fault_tolerance\/nodes.html#node-fault-tolerance"}
{"question":"If I\u2019d like to debug out of memory, how do I Do that, and which documentation should I look?","answer":"To debug out of memory errors, you can use the dmesg CLI command to verify if the processes are killed by the Linux out-of-memory killer. If Ray\u2019s memory monitor kills the worker, it is automatically retried. If Tasks or Actors cannot be retried, they raise an exception with a cleaner error message. You can also refer to the Ray Dashboard\u2019s metrics page and event page for out-of-memory killer-specific events and metrics. The documentation to address the out of memory issue can be found at https:\/\/docs.ray.io\/en\/latest\/ray-core\/scheduling\/ray-oom-prevention.html.","source":"https:\/\/docs.ray.io\/en\/master\/ray-observability\/user-guides\/debug-apps\/debug-memory.html#detecting-out-of-memory-errors"}
{"question":"How to use callback in Trainer?","answer":"To use a callback in Trainer, you need to create a class that extends the Callback class from ray.tune. In this class, you can define methods that correspond to different hooks in the training process, such as on_trial_result, on_trial_start, on_trial_error, etc. These methods will be called at the appropriate times during training. For example, the on_trial_result method will be called each time a result is received from a trial. In the provided example, a callback is created that prints a metric each time a result is received. This callback is then passed to the Tuner's run_config.","source":"https:\/\/docs.ray.io\/en\/master\/tune\/api\/doc\/ray.tune.Callback.html#ray-tune-callback"}
{"question":"How to provide current working directory to ray?","answer":"To provide the current working directory to ray, you can use the 'working_dir' argument in the 'runtime_env' dictionary. If the directory is local, you can directly provide the path. For example: runtime_env = {..., \\","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/handling-dependencies.html#remote-uris"}
{"question":"how to create an actor instance with parameter?","answer":"To create an actor instance with a parameter, you can modify the constructor of the actor class to accept parameters. For example, in Python, you can modify the Counter class like this:\\n\\n@ray.remote\\nclass Counter:\\n    def __init__(self, start_value):\\n        self.value = start_value\\n\\n    def increment(self):\\n        self.value += 1\\n        return self.value\\n\\n    def get_counter(self):\\n        return self.value\\n\\n# Create an actor from this class with a start value of 5.\\ncounter = Counter.remote(5)\\n\\nThis will create an instance of the Counter actor with a starting value of 5. Similar modifications can be made for Java and C++.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/actors.html#actors"}
{"question":"how to push a custom module to ray which is using by Actor ?","answer":"To push a custom module to ray which is being used by Actor, you can use the 'py_modules' field in the 'runtime_env' parameter of the 'ray.init' function. You need to pass the module as a list to 'py_modules'. For example: ray.init('ray:\/\/123.456.7.89:10001', runtime_env={'py_modules': [my_module]}). Then, you can use the module in your remote function without needing to import it inside the function.","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/handling-dependencies.html#library-development"}
{"question":"how to print ray working directory?","answer":"To print the working directory in Ray, you can use the 'working_dir' attribute in the runtime environment. Here is an example: \\n\\nruntime_env = {\\n    \\","source":"https:\/\/docs.ray.io\/en\/master\/ray-core\/handling-dependencies.html#runtime-environments"}
